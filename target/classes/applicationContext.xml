<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.3.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd ">
    <!--引入外部资源配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--配置日志-->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="resultSetLogEnabled" value="true" />
        <property name="statementLogEnabled" value="true" />
        <!--输出可执行的SQL-->
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>
    <!--配置数据源：采用Druid连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat,log4j" />
        <!--配置最大连接数-->
        <property name="maxActive" value="20" />
        <!--配置初始化大小-->
        <property name="initialSize" value="10" />
        <!--配置获取连接池等待超时最大时间-->
        <property name="maxWait" value="60000" />
        <!--配置最小连接数-->
        <property name="minIdle" value="10" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="600000" />
        <property name="maxEvictableIdleTimeMillis" value="900000" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!--配置连接池连接状态-->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />
        <!--是否采用异步初始化-->
        <property name="asyncInit" value="true" />
        <!--引入日志-->
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
            </list>
        </property>
    </bean>
    <!--配置sqlsession工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--配置mybatis的mapper包扫描-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zlk.*.mapper"></property>
    </bean>
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置aop事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
            <tx:method name="select*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
        </tx:attributes>
    </tx:advice>
    <!--配置切面-->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.zlk.*.service.*.*(..))"/>
    </aop:config>
    <aop:aspectj-autoproxy  proxy-target-class="true"/>
    <!-- 配置service包扫描 -->
    <context:component-scan base-package="com.zlk.*.service"></context:component-scan>

    <!--
		1.配置securityManager！
	-->
<!--    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
<!--        <property name="cacheManager" ref="cacheManager"/>-->
<!--        &lt;!&ndash; Single realm app.  If you have multiple realms, use the 'realms' property instead. &ndash;&gt;-->
<!--        <property name="sessionMode" value="native"/>-->
<!--        <property name="realm" ref="jdbcRealm"/>-->
<!--    </bean>-->

<!--    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
<!--        &lt;!&ndash; Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one-->
<!--             will be creaed with a default config:-->
<!--             <property name="cacheManager" ref="ehCacheManager"/> &ndash;&gt;-->
<!--        &lt;!&ndash; If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want-->
<!--             a specific Ehcache configuration to be used, specify that here.  If you don't, a default-->
<!--             will be used.:-->
<!--			 加入一个ehcache的配置文件，需要导入ehcache jar包和配置文件 &ndash;&gt;-->
<!--        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash;-->
<!--        3.配置realm-->
<!--            直接配置了实现了realm接口的bean-->
<!--    &ndash;&gt;-->
<!--    <bean id="jdbcRealm" class="com.zlk.user.realms.ShiroRealm"></bean>-->
<!--    &lt;!&ndash;配置LifecycleBeanPostProcessor  可以自动调用Spring IOC 容器中shiro bean 的生命周期方法  &ndash;&gt;-->
<!--    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->
<!--    &lt;!&ndash;启用IOC容器中使用shiro的注解-->
<!--        必须在配置了LifecycleBeanPostProcessor之后才能使用&ndash;&gt;-->
<!--    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"-->
<!--          depends-on="lifecycleBeanPostProcessor"/>-->
<!--    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
<!--        <property name="securityManager" ref="securityManager"/>-->
<!--    </bean>-->
<!--    &lt;!&ndash;-->
<!--        配置shiroFilter-->
<!--            1.id必须和web.xml文件中配置的DelegatingFilterProxy的<filter-name>一致-->
<!--    &ndash;&gt;-->
<!--    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
<!--        <property name="securityManager" ref="securityManager"/>-->
<!--        &lt;!&ndash; 登陆页面&ndash;&gt;-->
<!--        <property name="loginUrl" value="/UserController/toLogin"/>-->
<!--        &lt;!&ndash; 登陆成功页面&ndash;&gt;-->
<!--        <property name="successUrl" value="/UserController/toIndex"/>-->
<!--        &lt;!&ndash;没有权限的页面&ndash;&gt;-->
<!--        <property name="unauthorizedUrl" value="/unauthorizedUrl.jsp"/>-->
<!--        &lt;!&ndash;-->
<!--            配置被保护的页面有哪些-->
<!--            并配置保护的页面需要的权限有哪些-->
<!--            anon：允许匿名访问-->
<!--            authc：只允许通过认证的用户访问-->
<!--            logout: 登出-->
<!--            roles：角色过滤器-->
<!--            该属性中配置的是请求的访问路径 包括发往controller的请求-->
<!--            且配置效果以第一次配置优先生效-->
<!--        &ndash;&gt;-->
<!--        <property name="filterChainDefinitions">-->
<!--            <value>-->
<!--                /index.jsp = anon-->
<!--                /UserController/toLogin = anon-->
<!--                /UserController/login = anon-->
<!--                /UserController/logout = logout-->

<!--&lt;!&ndash;                /list.jsp = anon&ndash;&gt;-->
<!--&lt;!&ndash;                /WEB-INF/login.jsp = anon&ndash;&gt;-->
<!--&lt;!&ndash;                /UserController/signIn = anon&ndash;&gt;-->
<!--&lt;!&ndash;                /shiro/test = anon&ndash;&gt;-->
<!--&lt;!&ndash;                /shiro/login = anon&ndash;&gt;-->
<!--&lt;!&ndash;                /shiro/logout = logout&ndash;&gt;-->
<!--                &lt;!&ndash;其他页面都全部配置为需认证&ndash;&gt;-->
<!--                # everything else requires authentication:-->
<!--                /** = authc-->
<!--            </value>-->
<!--        </property>-->
<!--    </bean>-->

</beans>